// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`snap 1`] = `
"import { Component as Comp } from \\"vue-tsx-support\\";
import {
  Component,
  Prop,
  Emit,
  Inject,
  Provide,
  Watch
} from \\"vue-property-decorator\\";
const YourComponent = {
  steup(
    props: {
      propsA: number | undefined;
    },
    context
  ) {
    const foo: string = inject(\\"foo\\");
    const injectionBar: string = inject(\\"bar\\");
    const data1 = value(123);
    const data2 = value(234);
    const test = () => {
      data1.value++;
      context.$emit(\\"test\\");
    };
    const testt = () => {
      data1.value++;
      context.$emit(\\"testtest\\");
    };
    const test1 = (v: number) => {
      data1.value++;
      context.$emit(\\"test1\\", v);
    };
    const test2 = (v: number) => {
      data1.value++;
      context.$emit(\\"test2\\", v + 1, v);
    };
    const hehe = () => {
      data1.value++;
      console.log(data1.value, props.propsA);
      this.$emit(\\"123\\", data1.value);
    };
    const fooo = () => {
      const { fff } = foo();
      console.log(
        props.propsA,
        data1.value,
        data2.value,
        what.value,
        why.value,
        hehe
      );
    };
    const what = computed(() => {
      return data1.value;
    });
    const why = computed(
      () => {
        return data2.value + props.propsA + 1;
      },
      value => {
        data2.value = value - 1;
        console.log(foo, injectionBar);
      }
    );
    onMounted(() => {
      if (this.$slots.default) {
        this.$slots.defalult(this.$refs.node);
      }
      console.log(123);
      fooo();
      console.log(props.propsA);
      console.log(self.$route);
    });
    watch(props.propsA, (value: number, oldValue: number) => {
      console.log(props.propsA, value, oldValue);
    });
    watch(data1, () => {
      console.log(
        props.propsA,
        data1.value,
        data2.value,
        what.value,
        why.value,
        hehe()
      );
    });
    watch(context.$route, () => {
      console.log(this.$router, this.$route, this.$store, this.$store.getters);
    });
    provide({ provideFoo: \\"foo\\", baz: \\"baz\\" });
    return { foo, injectionBar, data1, data2, hehe, fooo, what, why };
  },
  render() {
    return <div>{this.data1}</div>;
  }
};
"
`;
